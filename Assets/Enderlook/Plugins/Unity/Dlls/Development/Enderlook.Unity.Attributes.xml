<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enderlook.Unity.Attributes</name>
    </assembly>
    <members>
        <member name="F:Enderlook.Unity.Attributes.ShowIfDrawer.active">
            <summary>
            If <see langword="true"/>, the property field is either disabled or hidden.
            </summary>
        </member>
        <member name="T:Enderlook.Unity.Attributes.PropertyPopup">
            <summary>
            A helper class to draw properties according to a popup selector.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.PropertyPopup.#ctor(System.String,Enderlook.Unity.Attributes.PropertyPopupOption[])">
            <summary>
            Determie the posible options for the popup.
            </summary>
            <param name="modeProperty">Property used to determine which property draw.</param>
            <param name="modes">Possible options. (name to show in inspector, name of property which must show if selected, target value to determine if chosen).</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.PropertyPopup.DrawField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            Draw the field in the given place.
            </summary>
            <param name="position">Position to draw the field.</param>
            <param name="property">Property used to draw the field.</param>
            <param name="label">Label to show in inspector.</param>
            <returns>Property height.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.PropertyPopup.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            Draw the field in the given place.
            </summary>
            <param name="position">Position to draw the field.</param>
            <param name="property">Property used to draw the field.</param>
            <param name="label">Label to show in inspector.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.PropertyPopup.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            Get the height of the drawed property
            </summary>
            <param name="property">Property used to draw the field.</param>
            <param name="label">Label to show in inspector.</param>
            <returns>Property height.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.RestrictTypeChecking.CheckRestrictionFeasibility(Enderlook.Unity.Attributes.RestrictTypeAttribute,System.Type,System.String@)">
            <summary>
            Check if the given type restriction is possible.
            </summary>
            <param name="attribute">Attribute which produces the restriction.</param>
            <param name="fieldType">Field to restrict.</param>
            <param name="errorMessage">Message error, if return is <see langword="false"/>.</param>
            <returns>Whenever its allowed or there is an error.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.RestrictTypeChecking.CheckIfTypeIsAllowed(Enderlook.Unity.Attributes.RestrictTypeAttribute,System.Type,System.String@)">
            <summary>
            Check if the given type is allowed by <paramref name="attribute"/> restrictions.
            </summary>
            <param name="attribute">Attribute which produces the restriction.</param>
            <param name="resultType"><see cref="T:System.Type"/> to be checked</param>
            <param name="errorMessage">Message error, if return is <see langword="false"/>.</param>
            <returns>Whenever its allowed or there is an error.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.RestrictTypeChecking.CheckIfTypeIsAllowed(Enderlook.Unity.Attributes.RestrictTypeAttribute,System.Type)">
            <summary>
            Check if the given type is allowed by <paramref name="attribute"/> restrictions.
            </summary>
            <param name="attribute">Attribute which produces the restriction.</param>
            <param name="resultType"><see cref="T:System.Type"/> to be checked</param>
            <returns>Whenever its allowed or there is an error.</returns>
        </member>
        <member name="T:Enderlook.Unity.Attributes.SerializedPropertyGUIHelper">
            <summary>
            A helper class to manage <see cref="T:Enderlook.Unity.Attributes.GUIAttribute"/> and <see cref="T:Enderlook.Unity.Attributes.NameAttribute"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.SerializedPropertyGUIHelper.GetGUIContent(Enderlook.Unity.Utils.UnityEditor.SerializedPropertyHelper,UnityEngine.GUIContent@)">
            <summary>
            Check if the <see cref="T:UnityEditor.SerializedProperty"/> does have a <see cref="T:Enderlook.Unity.Attributes.GUIAttribute"/> <see cref="T:System.Attribute"/> and if has change <paramref name="label"/> by its <see cref="T:UnityEngine.GUIContent"/>.
            </summary>
            <param name="helper"></param>
            <param name="label">Current <see cref="T:UnityEngine.GUIContent"/>.</param>
            <returns>Whenever there was or not an special <see cref="T:UnityEngine.GUIContent"/>.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.SerializedPropertyGUIHelper.GetGUIContent(UnityEditor.SerializedProperty,UnityEngine.GUIContent@)">
            <summary>
            Check if the <see cref="T:UnityEditor.SerializedProperty"/> does have a <see cref="T:Enderlook.Unity.Attributes.GUIAttribute"/> <see cref="T:System.Attribute"/> and if has change <paramref name="label"/> by its <see cref="T:UnityEngine.GUIContent"/>.
            </summary>
            <param name="serializedProperty"></param>
            <param name="label">Current <see cref="T:UnityEngine.GUIContent"/>.</param>
            <returns>Whenever there was or not an special <see cref="T:UnityEngine.GUIContent"/>.</returns>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.None">
            <summary>
            The texture will be shown along with the label and field.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.Label">
            <summary>
            The label will be hide.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.Field">
            <summary>
            The field will be hide.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.All">
            <summary>
            Both <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.Label"/> and <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.Field"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.drawOnSameLine">
            <summary>
            Whenever the texture will be drawn on the same line as the property or in a line bellow.<br/>
            This is ignored if <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.hideMode"/> is <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.All"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.centered">
            <summary>
            Whenever the textre will be centered.<br/>
            This is ignored if <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.drawOnSameLine"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.height">
            <summary>
            Height of the <see cref="T:UnityEngine.Rect"/> used to show the texture.<br/>
            On -1, the height of the property is used.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.width">
            <summary>
            Width of the <see cref="T:UnityEngine.Rect"/> used to show the texture.<br/>
            On -1, <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.height"/> is used.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawTextureAttribute.hideMode">
            <summary>
            Determines how it will be shown in the inspector.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.DrawTextureAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Draw the texture next to the field in the inspector.
            </summary>
            <param name="drawOnSameLine">Whenever the texture will be drawn on the same line as the property or in a line bellow.</param>
            <param name="centered">Whenever the textre will be centered.<br/>
            This is ignored if <paramref name="drawOnSameLine"/> is <see langword="true"/>.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.DrawTextureAttribute.#ctor(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Draw the texture below the field in the inspector.
            </summary>
            <param name="size">Size of the <see cref="T:UnityEngine.Rect"/> used to show the texture.<br/>
            On -1, the height of the property is used.</param>
            <param name="drawOnSameLine">Whenever the texture will be drawn on the same line as the property or in a line bellow.</param>
            <param name="centered">Whenever the textre will be centered.<br/>
            This is ignored if <paramref name="drawOnSameLine"/> is <see langword="true"/>.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.DrawTextureAttribute.#ctor(System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Draw the texture below the field in the inspector.
            </summary>
            <param name="height">Height of the <see cref="T:UnityEngine.Rect"/> used to show the texture.<br/>
            On -1, the height of the property is used.</param>
            <param name="width">Width of the <see cref="T:UnityEngine.Rect"/> used to show the texture.<br/>
            On -1, <paramref name="height"/> is used.</param>
            <param name="drawOnSameLine">Whenever the texture will be drawn on the same line as the property or in a line bellow.</param>
            <param name="centered">Whenever the textre will be centered.<br/>
            This is ignored if <paramref name="drawOnSameLine"/> is <see langword="true"/>.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.DrawTextureAttribute.#ctor(Enderlook.Unity.Attributes.DrawTextureAttribute.Hide,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Draw the texture of the field in the inspector.
            </summary>
            <param name="hideMode">Configure parts of the property that won't be shown.</param>
            <param name="size">Size of the <see cref="T:UnityEngine.Rect"/> used to show the texture.<br/>
            On -1, the height of the property is used.</param>
            <param name="drawOnSameLine">Whenever the texture will be drawn on the same line as the property or in a line bellow.<br/>
            This is ignored if <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.hideMode"/> is <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.All"/>.</param>
            <param name="centered">Whenever the textre will be centered.<br/>
            This is ignored if <paramref name="drawOnSameLine"/> is <see langword="true"/>.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.DrawTextureAttribute.#ctor(Enderlook.Unity.Attributes.DrawTextureAttribute.Hide,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Draw the texture of the field in the inspector.
            </summary>
            <param name="hideMode">Configure parts of the property that won't be shown.</param>
            <param name="height">Height of the <see cref="T:UnityEngine.Rect"/> used to show the texture.<br/>
            On -1, the height of the property is used.</param>
            <param name="width">Width of the <see cref="T:UnityEngine.Rect"/> used to show the texture.<br/>
            On -1, <paramref name="height"/> is used.</param>
            <param name="drawOnSameLine">Whenever the texture will be drawn on the same line as the property or in a line bellow.<br/>
            This is ignored if <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.hideMode"/> is <see cref="F:Enderlook.Unity.Attributes.DrawTextureAttribute.Hide.All"/>.</param>
            <param name="centered">Whenever the textre will be centered.<br/>
            This is ignored if <paramref name="drawOnSameLine"/> is <see langword="true"/>.</param>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawVectorRelativeToTransformAttribute.usePositionHandler">
            <summary>
            Whenever it should use <see cref="M:UnityEditor.Handles.PositionHandle(UnityEngine.Vector3,UnityEngine.Quaternion)"/> or <see cref="M:UnityEditor.Handles.FreeMoveHandle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Vector3,UnityEditor.Handles.CapFunction)"/> to draw the handler.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawVectorRelativeToTransformAttribute.icon">
            <summary>
            Icon displayed in scene. If empty no icon will be displayed.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.DrawVectorRelativeToTransformAttribute.reference">
            <summary>
            Reference used to show handler. If empty, <see cref="T:UnityEngine.Transform"/> of the <see cref="T:UnityEngine.GameObject"/> will be used.
            </summary>
        </member>
        <member name="T:Enderlook.Unity.Attributes.GUIAttribute.Mode">
            <summary>
            How the name will behave
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.GUIAttribute.Mode.Value">
            <summary>
            Use the string as value
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.GUIAttribute.Mode.Reference">
            <summary>
            Use the string to get the real value by reflection.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.IsConfirmed``1(``0,System.Reflection.BindingFlags)">
            <summary>
            Check if the given attribute is confirmed or not in <paramref name="instance"/>.<br/>
            Return <see langword="null"/> if the <c>instance.<see cref="F:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.confirmFieldName"/></c> wasn't found.
            </summary>
            <typeparam name="T">Type of data to look for the confirmation field.</typeparam>
            <param name="instance">Instance of <typeparamref name="T"/> used to find the field value.</param>
            <param name="bindingFlags">Binding flags used to find the field.</param>
            <returns>Boolean value of <c>instance.<see cref="F:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.confirmFieldName"/></c>. <see langword="null"/> if the field doesn't exist.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.IsConfirmed``1(``0)">
            <summary>
            Check if the given attribute is confirmed or not in <paramref name="instance"/>.<br/>
            Return <see langword="null"/> if the <c>instance.<see cref="F:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.confirmFieldName"/></c> wasn't found.
            </summary>
            <typeparam name="T">Type of data to look for the confirmation field.</typeparam>
            <param name="instance">Instance of <typeparamref name="T"/> used to find the field value.</param>
            <returns>Boolean value of <c>instance.<see cref="F:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.confirmFieldName"/></c>. <see langword="null"/> if the field doesn't exist.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.GetFieldsWithConfirmationAttribute``1(``0,System.Reflection.BindingFlags)">
            <summary>
            Get all fields from <typeparamref name="T"/> type in <paramref name="instance"/> which has <see cref="T:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute"/>.
            </summary>
            <typeparam name="T">Type of data to look for fields.</typeparam>
            <param name="instance">Instance of <typeparamref name="T"/> used to find fields.</param>
            <param name="bindingFlags">Binding flags used to find fields.</param>
            <returns>Field and its confirmation attribute</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.GetFieldsWithConfirmationAttribute``1(``0)">
            <summary>
            Get all fields from <typeparamref name="T"/> type in <paramref name="instance"/> which has <see cref="T:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute"/>.
            </summary>
            <typeparam name="T">Type of data to look for fields.</typeparam>
            <param name="instance">Instance of <typeparamref name="T"/> used to find fields.</param>
            <returns>Field and its confirmation attribute</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.GetConfirmedFields``1(``0,System.Reflection.BindingFlags)">
            <summary>
            Get all fields from <typeparamref name="T"/> type in <paramref name="instance"/> which has <see cref="T:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute"/> and is <see langword="true"/>.
            </summary>
            <typeparam name="T">Type of data to look for fields.</typeparam>
            <param name="instance">Instance of <typeparamref name="T"/> used to find fields.</param>
            <param name="bindingFlags">Binding flags used to find fields.</param>
            <returns>Fields which attribute are <see langword="true"/></returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute.GetConfirmedFields``1(``0)">
            <summary>
            Get all fields from <typeparamref name="T"/> type in <paramref name="instance"/> which has <see cref="T:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute"/> and is <see langword="true"/>.
            </summary>
            <typeparam name="T">Type of data to look for fields.</typeparam>
            <param name="instance">Instance of <typeparamref name="T"/> used to find fields.</param>
            <returns>Fields which attribute are <see langword="true"/></returns>
        </member>
        <member name="T:Enderlook.Unity.Attributes.IndentedAttribute">
            <summary>
            Add or remove indentation to the drew serialized property.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.IndentedAttribute.indentationOffset">
            <summary>
            Indentation to add.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.IndentedAttribute.#ctor(System.Int32)">
            <summary>
            Add or remove indentation to the drew serialized property.
            </summary>
            <param name="indentationOffset">Indentation to add. Negative values remove indentation.</param>
        </member>
        <member name="F:Enderlook.Unity.Attributes.PropertyPopupAttribute.modeName">
            <summary>
            Name of field used to determine which property must be used.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.PropertyPopupAttribute.#ctor(System.String)">
            <summary>
            Enable property popup on the class which is being decorated.
            </summary>
            <param name="modeName">Name of field used to determine which property must be used.</param>
        </member>
        <member name="F:Enderlook.Unity.Attributes.PropertyPopupOptionAttribute.target">
            <summary>
            Value that must match the mode field in other to show this field.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.PropertyPopupOptionAttribute.#ctor(System.Object)">
            <summary>
            Allow to use the decoreated field as option for the property popup.
            </summary>
            <param name="target">Value that must match the mode field in other to show this field.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.RestrictTypeAttribute.#ctor(System.Type[])">
            <summary>
            Restrict the values of this field by only types which implement, inherit or can be casted to all the types from <paramref name="restriction"/>.<br/>
            Additionally, the values of this field must inherit from <see cref="T:UnityEngine.Object"/>.
            </summary>
            <param name="restriction">Values must implement, inherit or be castable to all this types.<br/>
            If a type is a class, it must inherit from <see cref="T:UnityEngine.Object"/>. Struct types are not allowed.</param>
        </member>
        <member name="T:Enderlook.Unity.Attributes.ShowIfAttribute.ActionMode">
            <summary>
            Action to take depending of the condition.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.ShowIfAttribute.ActionMode.ShowHide">
            <summary>
            The property will be hidden or show depending of the condition.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.ShowIfAttribute.ActionMode.EnableDisable">
            <summary>
            The property will be disabled or enabled depending of the condition.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.ShowIfAttribute.#ctor(System.String,Enderlook.Unity.Attributes.ShowIfAttribute.ActionMode,System.Boolean)">
            <summary>
            Action to take depending of the condition.
            </summary>
            <param name="nameOfConditional">Action to take depending of the condition.</param>
            <param name="goal">Required boolean state to show or enable the property.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.ShowIfAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Action to take depending of the condition.
            </summary>
            <param name="goal">Required boolean state to show or enable the property.</param>
        </member>
        <member name="M:Enderlook.Unity.Utils.UnityEditor.SerializedObjectExtensionsHasConfirmationField.ToggleableField(UnityEditor.SerializedObject,System.String,System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Generate a toggleable button to hide or show a certain field, which is also created by this method.
            </summary>
            <param name="source">Instance where its executed this method.</param>
            <param name="serializedProperty">Name of <see cref="T:UnityEditor.SerializedProperty"/> to show in the inspector.<br/>
            This field must have a <see cref="T:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute"/>.</param>
            <param name="includeChildren">If <see langword="true"/> the <paramref name="serializedProperty"/> including children is drawn.</param>
            <param name="bindingFlags">Binding flags used to find fields.</param>
        </member>
        <member name="M:Enderlook.Unity.Utils.UnityEditor.SerializedObjectExtensionsHasConfirmationField.ShowToggleableFields(UnityEditor.SerializedObject,System.Boolean,System.Reflection.BindingFlags)">
            <summary>
            Generate a toggleable button to hide or show all fields with <see cref="T:Enderlook.Unity.Attributes.HasConfirmationFieldAttribute"/> in <see cref="P:UnityEditor.SerializedObject.targetObject"/> from <paramref name="source"/>, which are also created by this method.
            </summary>
            <param name="source">Instance where its executed this method.</param>
            <param name="includeChildren">If <see langword="true"/> the <see cref="T:UnityEditor.SerializedProperty"/> including children is drawn.</param>
            <param name="bindingFlags">Binding flags used to find fields.</param>
        </member>
    </members>
</doc>

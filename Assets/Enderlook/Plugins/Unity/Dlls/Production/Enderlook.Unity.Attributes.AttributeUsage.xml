<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enderlook.Unity.Attributes.AttributeUsage</name>
    </assembly>
    <members>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageAccessibilityAttribute.#ctor(System.Reflection.BindingFlags)">
            <summary>
            Determines which <see cref="T:System.Reflection.BindingFlags"/> must have the decorated.
            </summary>
            <param name="bindingFlags">Necessary binding flags.</param>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterNumber">
            <summary>
            Number of the parameter to check.<br/>
            Example:<br/>
                • 0 -> Return type.<br/>
                • 1 -> First method parameter.<br/>
                • 2 -> Second method parameter<br/>
                • 3 -> Third method parameter...
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterType">
            <summary>
            Determine the type of parameter. Use <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.VoidOrNone"/> to specify that it should not exist.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.checkingFlags">
            <summary>
            Additional checking rules.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.#ctor(System.Int32,System.Type[])">
            <summary>
            Each time Unity compile script, they will be analyzed to check if the attribute is being used in proper methods.
            </summary>
            <param name="parameterNumber">Number of the parameter to check.<br/>
            Example:<br/>
                • 0 -> Return type.<br/>
                • 1 -> First method parameter.<br/>
                • 2 -> Second method parameter<br/>
                • 3 -> Third method parameter...</param>
            <param name="types">Data types allowed.<br/>
            If empty, any data type is allowed.<br/>
            To specify that a parameter should not exist, use <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.VoidOrNone"/> in <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterType"/>.</param>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.typeFlags">
            <summary>
            Additional checking rules.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.isBlackList">
            <summary>
            If <see langword="true"/>, <see cref="!:Types"/> will be forbidden types (blacklist).<br/>
            If <see langword="false"/>, they will be the only allowed types (white list).<br/>
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.includeEnumerableTypes">
            <summary>
            If <see langword="true"/>, it will also check for array o list versions of types.<br/>
            Useful because Unity <see cref="!:UnityEditor.PropertyDrawer"/> are draw on each element of an array or list <see cref="!:UnityEditor.SerializedProperty"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.#ctor(System.Type[])">
            <summary>
            Each time Unity compile script, they will be analyzed to check if the attribute is being used in proper DataTypes.
            </summary>
            <param name="types">Data types allowed. Set <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageRequireDataTypeAttribute.isBlackList"/> to <see langword="true"/> in order to become it forbidden data types.</param>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.BaseExecuteWhenScriptsReloads.loop">
            <summary>
            In which loop of the execution will this script executed.<br/>
            Accept any kind of number.
            </summary>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachFieldOfEachTypeWhenScriptsReloads">
            <summary>
            Executes the method decorated by this attribute for each field on each <see cref="T:System.Type"/> compiled by Unity each time Unity compiles code.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Reflection.FieldInfo"/>).
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachFieldOfEachTypeWhenScriptsReloads.fieldFilter">
            <summary>
            Determines rules about in which field does match.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachFieldOfEachTypeWhenScriptsReloads.#ctor(Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization,System.Int32)">
            <summary>
            Executes the method decorated by this attribute for each field on each <see cref="T:System.Type"/> compiled by Unity.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Reflection.FieldInfo"/>).
            </summary>
            <param name="fieldFlags">Whenever it must be Unity able to serialize it or if it does not matter.</param>
            <param name="loop">In which loop of the execution will this script execute.</param>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachMemberOfEachTypeWhenScriptsReloads">
            <summary>
            Executes the method decorated by this attribute for each member on each <see cref="T:System.Type"/> compiled by Unity each time Unity compiles code.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Reflection.MemberInfo"/>).
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachMemberOfEachTypeWhenScriptsReloads.#ctor(System.Int32)">
            <summary>
            Executes the method decorated by this attribute for each member on each <see cref="T:System.Type"/> compiled by Unity.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Reflection.MemberInfo"/>).
            </summary>
            <param name="loop">In which loop of the execution will this script execute.</param>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachMethodOfEachTypeWhenScriptsReloads">
            <summary>
            Executes the method decorated by this attribute for each method on each <see cref="T:System.Type"/> compiled by Unity each time Unity compiles code.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Reflection.MethodInfo"/>).
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachMethodOfEachTypeWhenScriptsReloads.#ctor(System.Int32)">
            <summary>
            Executes the method decorated by this attribute for each method on each <see cref="T:System.Type"/> compiled by Unity.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Reflection.MethodInfo"/>).
            </summary>
            <param name="loop">In which loop of the execution will this script execute.</param>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachPropertyOfEachTypeWhenScriptsReloads">
            <summary>
            Executes the method decorated by this attribute for each property on each <see cref="T:System.Type"/> compiled by Unity each time Unity compiles code.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Reflection.PropertyInfo"/>).
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachPropertyOfEachTypeWhenScriptsReloads.#ctor(System.Int32)">
            <summary>
            Executes the method decorated by this attribute for each property on each <see cref="T:System.Type"/> compiled by Unity.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Reflection.PropertyInfo"/>).
            </summary>
            <param name="loop">In which loop of the execution will this script execute.</param>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachTypeWhenScriptsReloads">
            <summary>
            Executes the method decorated by this attribute for each <see cref="T:System.Type"/> compiled by Unity each time Unity compiles code.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Type"/>).
            </summary>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachTypeWhenScriptsReloads.TypeFlags">
            <summary>
            Rules that should be match by the type.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachTypeWhenScriptsReloads.TypeFlags.IsEnum">
            <summary>
            Only execute on types which <see cref="P:System.Type.IsEnum"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachTypeWhenScriptsReloads.TypeFlags.IsNonEnum">
            <summary>
            Only execute on types which <see cref="P:System.Type.IsEnum"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachTypeWhenScriptsReloads.TypeFlags.IsEitherEnumNonEnum">
            <summary>
            Execute on types regardless <see cref="P:System.Type.IsEnum"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachTypeWhenScriptsReloads.typeFilter">
            <summary>
            Determines rules about in which types does match.
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachTypeWhenScriptsReloads.#ctor(Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteOnEachTypeWhenScriptsReloads.TypeFlags,System.Int32)">
            <summary>
            Executes the method decorated by this attribute for each <see cref="T:System.Type"/> compiled by Unity, that matches the <paramref name="typeFlags"/> criteria.<br/>
            The method to decorate must have the signature DoSomething(<see cref="T:System.Type"/>).
            </summary>
            <param name="typeFlags">Determines rules about in which types does match.</param>
            <param name="loop">In which loop of the execution will this script execute.</param>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteWhenScriptsReloads">
            <summary>
            Executes the method decorated by this attribute each time Unity compiles code.<br/>
            The method to decorate must have the signature DoSomething().
            </summary>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.PostCompiling.Attributes.ExecuteWhenScriptsReloads.#ctor(System.Int32)">
            <summary>
            Executes the method decorated by this attribute.<br/>
            The method to decorate must have the signature DoSomething().
            </summary>
            <param name="loop">In which loop of the execution will this script execute.</param>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.DoNotCheckAttributeTesting.CheckIfShouldBeIgnored(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Check if this <paramref name="memberInfo"/> should be ignored when checking if has <paramref name="typeThatMayBeIgnored"/>.
            </summary>
            <param name="memberInfo">Member to check.</param>
            <param name="typeThatMayBeIgnored">Type of attribute that it's being checked.</param>
            <returns>Whenever it should be ignored or not.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.DoNotCheckAttributeTesting.CheckIfShouldBeIgnored(System.Type,System.Type)">
            <summary>
            Check if this <paramref name="type"/> should be ignored when checking if has <paramref name="typeThatMayBeIgnored"/>.
            </summary>
            <param name="type">Type to check.</param>
            <param name="typeThatMayBeIgnored">Type of attribute that it's being checked.</param>
            <returns>Whenever it should be ignored or not.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.DoNotCheckAttributeTesting.GetAttributeTypesThatShouldBeIgnored(System.Reflection.MemberInfo)">
            <summary>
            Get attribute types that should be ignored.
            </summary>
            <param name="memberInfo">Member to check.</param>
            <returns>Attribute types that should be ignored.</returns>
        </member>
        <member name="M:Enderlook.Unity.Attributes.AttributeUsage.DoNotCheckAttributeTesting.GetAttributeTypesThatShouldBeIgnored(System.Type)">
            <summary>
            Get attribute types that should be ignored.
            </summary>
            <param name="type">Type to check.</param>
            <returns>Attribute types that should be ignored.</returns>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization">
            <summary>
            Rules that should be match by the field.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization.NotSerializableByUnity">
            <summary>
            Non serializable fields by Unity are allowed.<br/>
            <seealso cref="!:ReflectionHelper.CanBeSerializedByUnity(FieldInfo)"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization.SerializableByUnity">
            <summary>
            Serializable fields by Unity are allowed.
            <seealso cref="!:ReflectionHelper.CanBeSerializedByUnity(FieldInfo)"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization.EitherSerializableOrNotByUnity">
            <summary>
            Either serializable or not serializable fields by Unity are allowed.<br/>
            <seealso cref="F:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization.NotSerializableByUnity"/> and <seealso cref="F:Enderlook.Unity.Attributes.AttributeUsage.FieldSerialization.SerializableByUnity"/>.
            </summary>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode">
            <summary>
            The parameter mode.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.Common">
            <summary>
            Specifies an common parameter.<br/>
            If <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterNumber"/> is 0, this will be ignored.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.In">
            <summary>
            Specifies an in parameter.<br/>
            If <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterNumber"/> is 0, this will be ignored.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.Out">
            <summary>
            Specifies an out parameter.
            If <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterNumber"/> is 0, this will be ignored.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.Ref">
            <summary>
            Specifies a reference parameter.
            If <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.AttributeUsageMethodAttribute.parameterNumber"/> is 0, this will be ignored.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.ParameterMode.VoidOrNone">
            <summary>
            Specifies that this parameter should not exist.
            </summary>
        </member>
        <member name="T:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting">
            <summary>
            Determine relation of types to look for.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.ExactMatch">
            <summary>
            It must check for the same exact type.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSubclassTypes">
            <summary>
            Whenever it should check if the type is a subclass of one of the listed types.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSuperclassTypes">
            <summary>
            Whenever it should check if the type is superclass of one of the listed types.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckIsAssignableTypes">
            <summary>
            Whenever it should check for assignable from type to one of the listed types.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSubclassOrAssignable">
            <summary>
            <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSubclassTypes"/> or <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckIsAssignableTypes"/>.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckCanBeAssignedTypes">
            <summary>
            Whenever it should check if type can be assigned to one of the listed types.
            </summary>
        </member>
        <member name="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckSuperClassOrCanBeAssigned">
            <summary>
            <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckIsAssignableTypes"/> or <see cref="F:Enderlook.Unity.Attributes.AttributeUsage.TypeCasting.CheckCanBeAssignedTypes"/>.
            </summary>
        </member>
    </members>
</doc>
